
unsafe impl Send for Key {}

#[derive(Debug, PartialEq)]
pub enum Key{
    A,
    B,
    C,
    D,
    E,
    F,
    G,
    H,
    I,
    J,
    K,
    L,
    M,
    N,
    O,
    P,
    Q,
    R,
    S,
    T,
    U,
    V,
    W,
    X,
    Y,
    Z,
    Ctrl,
    Alt,
    Shift,
    Escape,
    Left,
    Right,
    Up,
    Down,
    Enter,
    Num1,
    Num2,
    Num3,
    Num4,
    Num5,
    Num6,
    Num7,
    Num8,
    Num9,
    Num0
}

pub fn num_to_key(key: u32) -> Option<Key>{
    //If the number is big, we only need the first four numbers
    let mut key = key;
    if key > 10_000 {
        key /= 1000;

    }

    match key{
        6357 => Some(Key::A),
        6422 => Some(Key::B),
        6488 => Some(Key::C),
        6553 => Some(Key::D),
        6619 => Some(Key::E),
        6684 => Some(Key::F),
        6750 => Some(Key::G),
        6815 => Some(Key::H),
        6881 => Some(Key::I),
        6946 => Some(Key::J),
        7012 => Some(Key::K),
        7077 => Some(Key::L),
        7143 => Some(Key::M),
        7209 => Some(Key::N),
        7274 => Some(Key::O),
        7340 => Some(Key::P),
        7405 => Some(Key::Q),
        7471 => Some(Key::R),
        7536 => Some(Key::S),
        7602 => Some(Key::T),
        7667 => Some(Key::U),
        7733 => Some(Key::V),
        7798 => Some(Key::W),
        7864 => Some(Key::X),
        7929 => Some(Key::Y),
        7995 => Some(Key::Z),
        29 => Some(Key::Ctrl),
        56 => Some(Key::Alt),
        42 => Some(Key::Shift),
        1769 => Some(Key::Escape),
        75 => Some(Key::Left),
        77 => Some(Key::Right),
        72 => Some(Key::Up),
        80 => Some(Key::Down),
        851 => Some(Key::Enter),
        3211 => Some(Key::Num1),
        3276 => Some(Key::Num2),
        3342 => Some(Key::Num3),
        3407 => Some(Key::Num4),
        3473 => Some(Key::Num5),
        3539 => Some(Key::Num6),
        3604 => Some(Key::Num7),
        3670 => Some(Key::Num8),
        3735 => Some(Key::Num9),
        3145 => Some(Key::Num0),
        _ => None
    }
}
